using System;
using System.Collections.Generic;

namespace Market.CurrencyManager.RpcCoin.Connectors
{
    interface IConnector
    {
        /// <summary>
        /// Sets the delegate in charge of logging
        /// </summary>
        /// <param name="logger">Delegate that logs a string</param>
        void SetLogger(Action<string> logger);

        /// <summary>
        /// Returns a list of transactions. It must return pending and confirmed transactions, but confirmed transactions
        /// are expected to be returned only once. Pending transactions can be returned in multiple invocations until they
        /// become confirmed. This method requires internal state keeping to achieve this functionality.
        /// </summary>
        /// <returns></returns>
        List<Transaction> ListTransactions();

        /// <summary>
        /// Unlocks the wallet to send
        /// </summary>
        /// <param name="key">Current key</param>
        void Unlock(string key);

        /// <summary>
        /// Locks the wallets
        /// </summary>
        void Lock();

        /// <summary>
        /// Changes the encryption key
        /// </summary>
        /// <param name="key">Current key, or null if wallet is not encrypted yet</param>
        /// <param name="newKey">New key</param>
        void ChangeKey(string key, string newKey);

        /// <summary>
        /// Verifies if a given string is a valid address
        /// </summary>
        /// <param name="address">Address to check</param>
        /// <returns>True if address is valid, False otherwise</returns>
        bool IsAddressValid(string address);

        /// <summary>
        /// Sends a given amount to a destination address, and returns transaction ID (hash)
        /// </summary>
        /// <param name="address">Destination address</param>
        /// <param name="amount">Amount to send</param>
        /// <returns>Transaction ID</returns>
        string SendTo(string address, decimal amount);

        /// <summary>
        /// Returns the fees consumed by a given transaction ID. It is always called for a transaction
        /// generated by this wallet (e.g. previously returned by SendTo)
        /// </summary>
        /// <param name="txId">Transaction ID</param>
        /// <returns>Fees</returns>
        decimal GetTransactionFees(string txId);

        /// <summary>
        /// Generates a new deposit address
        /// </summary>
        /// <returns>New deposit address</returns>
        string GenerateAddress();

        /// <summary>
        /// Verifies if the wallet is currently encrypted
        /// </summary>
        /// <returns>True if wallet is encrypted, False otherwise</returns>
        bool IsEncrypted();

        /// <summary>
        /// Returns when the wallet is reachable and working properly
        /// </summary>
        void Ping();

        /// <summary>
        /// Returns some information regarding the wallet
        /// </summary>
        /// <returns>Wallet info</returns>
        Info GetInfo();
    }
}
